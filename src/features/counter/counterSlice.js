import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCount } from "./counterAPI";

const initialState = {
  value: [
    {
      type: "bullDozers",
      Name: "",
      Title: "",
      Grade: "asdas",
      "Bar Length": "12",
      Date: "",
    },
    {
      type: "chainsaws",
      Name: "",
      Title: "",
      Grade: "asdas",
      "Bar Length": "12",
      Date: "",
    },
    {
      type: "bullDozers",
      Name: "",
      Title: "",
      Grade: "asdas",
      "Bar Length": "10",
      Date: "",
    },
    {
      type: "chainsaws",
      Name: "",
      Title: "",
      Grade: "asdas",
      "Bar Length": "12",
      Date: "",
    },
  ],
  objectTypes: [
    {
      title: "Bull Dozer",
      type: "bullDozers",
      fields: [
        { type: "Text", label: "Name" },
        { type: "Number", label: "Quantity" },
        { type: "Text", label: "Brand" },
      ],
    },
    {
      title: "Chainsaws",
      type: "chainsaws",
      fields: [
        { type: "Text", label: "Name" },
        { type: "Number", label: "Quantity" },
        { type: "Date", label: "Date" },
      ],
    },
  ],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: "objects",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value = { ...state.value, ...state.value };
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    addition: (state, action) => {
      state.value = [...action.payload];
    },
    additionType: (state, action) => {
      state.objectTypes = [...action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

export const { increment, decrement, addition, additionType } =
  counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectObjects = (state) => {
  return state.counter.value;
};

export const selectObjectsTypes = (state) => {
  return state.counter.objectTypes;
};

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const addObject = (data) => (dispatch, getState) => {
  let currentState = selectObjects(getState());
  dispatch(addition([...currentState, ...data]));
};

export const editObject = (data, index) => (dispatch, getState) => {
  let currentState = [...selectObjects(getState())];
  currentState[index] = { ...currentState[index], ...data };
  dispatch(addition([...currentState]));
};

export const addObjectType = (data) => (dispatch, getState) => {
  let currentState = selectObjectsTypes(getState());
  dispatch(additionType([...currentState, ...data]));
};

export const editObjectType = (data, index) => (dispatch, getState) => {
  let currentState = [...selectObjectsTypes(getState())];
  currentState[index] = { ...currentState[index], ...data };
  dispatch(additionType([...currentState]));
};

export default counterSlice.reducer;
